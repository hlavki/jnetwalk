/*
 * MainFrame.java
 *
 * Created on Sobota, 2007, marec 17, 22:23
 */

package eu.easyedu.jnetwalk;

import java.awt.Dimension;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

/**
 *
 * @author  hlavki
 */
public class MainFrame extends javax.swing.JFrame {
    
    private static final Logger log = Logger.getLogger(MainFrame.class.getName());
    private Board board;
    
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        board = new Board(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
                statusLabel.setText("Click: " + propertyChangeEvent.getNewValue());
            }
        });
        board.addGameOverListener(new BoardEventAdapter() {
            public void gameOverEvent(BoardEvent robotEvent) {
                gameOverPerformed(robotEvent);
            }
        });
        getContentPane().add(board, java.awt.BorderLayout.CENTER);
        setLevelComboBox();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        levelMenuButtonGroup = new javax.swing.ButtonGroup();
        toolbar = new javax.swing.JToolBar();
        newGameButton = new javax.swing.JButton();
        showHighScoresButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        showHighScoresMenuItem = new javax.swing.JMenuItem();
        quitMenuItemSeparator = new javax.swing.JSeparator();
        quitMenuItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        levelMenu = new javax.swing.JMenu();
        noviceLevelMenuItem = new javax.swing.JRadioButtonMenuItem();
        normalLevelMenuItem = new javax.swing.JRadioButtonMenuItem();
        masterLevelMenuItem = new javax.swing.JRadioButtonMenuItem();
        expertLevelMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("eu/easyedu/jnetwalk/Bundle"); // NOI18N
        setTitle(bundle.getString("application.name")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolbar.setPreferredSize(new java.awt.Dimension(18, 33));

        newGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eu/easyedu/jnetwalk/new-game.png")));
        newGameButton.setToolTipText(bundle.getString("new.game.menu.item")); // NOI18N
        newGameButton.setFocusPainted(false);
        newGameButton.setMaximumSize(new java.awt.Dimension(30, 30));
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });
        toolbar.add(newGameButton);

        showHighScoresButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eu/easyedu/jnetwalk/high-scores.png")));
        showHighScoresButton.setToolTipText(bundle.getString("show.high.scores.menu.item")); // NOI18N
        showHighScoresButton.setFocusPainted(false);
        showHighScoresButton.setMaximumSize(new java.awt.Dimension(30, 30));
        showHighScoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHighScoresButtonActionPerformed(evt);
            }
        });
        toolbar.add(showHighScoresButton);

        getContentPane().add(toolbar, java.awt.BorderLayout.NORTH);

        statusLabel.setText(" ");
        statusLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);

        gameMenu.setText(bundle.getString("game.menu.item")); // NOI18N

        newGameMenuItem.setText(bundle.getString("new.game.menu.item")); // NOI18N
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(newGameMenuItem);

        showHighScoresMenuItem.setText(bundle.getString("show.high.scores.menu.item")); // NOI18N
        showHighScoresMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHighScoresMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(showHighScoresMenuItem);
        gameMenu.add(quitMenuItemSeparator);

        quitMenuItem.setText(bundle.getString("close.game.menu.item")); // NOI18N
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(quitMenuItem);

        menuBar.add(gameMenu);

        settingsMenu.setText(bundle.getString("settings.menu.item")); // NOI18N

        levelMenu.setText(bundle.getString("level.menu.item")); // NOI18N

        levelMenuButtonGroup.add(noviceLevelMenuItem);
        noviceLevelMenuItem.setSelected(true);
        noviceLevelMenuItem.setText(bundle.getString("novice.level.menu.item")); // NOI18N
        noviceLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noviceLevelMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(noviceLevelMenuItem);

        levelMenuButtonGroup.add(normalLevelMenuItem);
        normalLevelMenuItem.setText(bundle.getString("normal.level.menu.item")); // NOI18N
        normalLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalLevelMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(normalLevelMenuItem);

        levelMenuButtonGroup.add(masterLevelMenuItem);
        masterLevelMenuItem.setText(bundle.getString("master.level.menu.item")); // NOI18N
        masterLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterLevelMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(masterLevelMenuItem);

        levelMenuButtonGroup.add(expertLevelMenuItem);
        expertLevelMenuItem.setText(bundle.getString("expert.level.menu.item")); // NOI18N
        expertLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expertLevelMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(expertLevelMenuItem);

        settingsMenu.add(levelMenu);

        menuBar.add(settingsMenu);

        helpMenu.setText(bundle.getString("help.menu.item")); // NOI18N

        aboutMenuItem.setText(bundle.getString("about.menu.item")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-217)/2, (screenSize.height-281)/2, 217, 281);
    }// </editor-fold>//GEN-END:initComponents
    
private void showHighScoresMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHighScoresMenuItemActionPerformed
    showStatistics();
}//GEN-LAST:event_showHighScoresMenuItemActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    board.getSettings().save();
}//GEN-LAST:event_formWindowClosing

private void showHighScoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHighScoresButtonActionPerformed
    showStatistics();
}//GEN-LAST:event_showHighScoresButtonActionPerformed

private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
    showAboutDialog();//GEN-LAST:event_aboutMenuItemActionPerformed
}                                             

private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
    board.newGame();
}//GEN-LAST:event_newGameMenuItemActionPerformed

private void expertLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expertLevelMenuItemActionPerformed
    board.setSkill(Skill.EXPERT);
}//GEN-LAST:event_expertLevelMenuItemActionPerformed

private void masterLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterLevelMenuItemActionPerformed
    board.setSkill(Skill.MASTER);
}//GEN-LAST:event_masterLevelMenuItemActionPerformed

private void normalLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalLevelMenuItemActionPerformed
    board.setSkill(Skill.NORMAL);
}//GEN-LAST:event_normalLevelMenuItemActionPerformed

private void noviceLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noviceLevelMenuItemActionPerformed
    board.setSkill(Skill.NOVICE);
}//GEN-LAST:event_noviceLevelMenuItemActionPerformed

private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
    board.newGame();
}//GEN-LAST:event_newGameButtonActionPerformed

private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
    System.exit(0);
}//GEN-LAST:event_quitMenuItemActionPerformed

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    setUIFont(new javax.swing.plaf.FontUIResource("Dialog", Font.PLAIN, 11));
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            MainFrame mainFrame = new MainFrame();
            mainFrame.setBoardSize();
            mainFrame.pack();
            mainFrame.setResizable(false);
            mainFrame.setVisible(true);
        }
    });
}
protected static void setUIFont(FontUIResource f) {
    //
    // sets the default font for all Swing components.
    // ex.
    //  setUIFont (new javax.swing.plaf.FontUIResource("Serif",Font.ITALIC,12));
    //
    java.util.Enumeration<Object> keys = UIManager.getDefaults().keys();
    while (keys.hasMoreElements()) {
        Object key = keys.nextElement();
        Object value = UIManager.get(key);
        if (value instanceof javax.swing.plaf.FontUIResource)
            UIManager.put(key, f);
    }
}

protected void showStatistics() {
    StatisticsDialog statisticsDialog = new StatisticsDialog(board.getSettings(), this, true);
    statisticsDialog.setVisible(true);
}

protected void showAboutDialog() {
    AboutDialog aboutDialog = new AboutDialog(this, true);
    aboutDialog.setVisible(true);
}

protected void setBoardSize() {
    int width = board.getPreferredSize().width - board.getSize().width;
    int height = board.getPreferredSize().height - board.getSize().height;
    log.fine("MainFrame size delta = " + width + " : " + height);
    setSize(new Dimension(getSize().width + width, getSize().height + height));
}

public void gameOverPerformed(BoardEvent evt) {
    showStatistics();
}

public void setLevelComboBox() {
    switch (board.getSettings().getSkill()) {
    case NOVICE:
        noviceLevelMenuItem.setSelected(true); break;
    case NORMAL:
        normalLevelMenuItem.setSelected(true); break;
    case MASTER:
        masterLevelMenuItem.setSelected(true); break;
    case EXPERT:
        expertLevelMenuItem.setSelected(true); break;
    }
}

    // Variables declaration - do not modify                     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JRadioButtonMenuItem expertLevelMenuItem;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu levelMenu;
    private javax.swing.ButtonGroup levelMenuButtonGroup;
    private javax.swing.JRadioButtonMenuItem masterLevelMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newGameButton;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JRadioButtonMenuItem normalLevelMenuItem;
    private javax.swing.JRadioButtonMenuItem noviceLevelMenuItem;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JSeparator quitMenuItemSeparator;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JButton showHighScoresButton;
    private javax.swing.JMenuItem showHighScoresMenuItem;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    
}
